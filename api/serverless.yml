service: api
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1

functions:
  register:
    role:  ${ssm:${self:custom.stage}-register-iam-role}
    handler: register/handler.register
    events:
      - http:
          path: /users
          method: post
    environment:
      DYNAMODB_USERS: ${ssm:${self:custom.stage}-dynamodb-users-table} #-dynamodb-users-table veio do arquivo ssm-paramter-name-table.tf onde dertermino o nome do parametro.

  login:
    role:  ${ssm:${self:custom.stage}-login-iam-role}
    handler: login/handler.login
    events:
      - http:
          path: /login
          method: post
    environment:
      DYNAMODB_USERS: ${ssm:${self:custom.stage}-dynamodb-users-table} #-dynamodb-users-table veio do arquivo ssm-paramter-name-table.tf onde dertermino o nome do parametro.
      JWT_SECRET: ${ssm:${self:custom.stage}-jwt-secret}
      EMAIL_GSI: ${ssm:${self:custom.stage}-email-gsi}
  
  create_booking:
    role:  ${ssm:${self:custom.stage}-create-booking-iam-role}
    handler: create-booking/handler.create
    events:
      - http:
          path: /bookings
          method: post
          authorizer: authorizer
    environment:
      DYNAMODB_BOOKINGS: ${ssm:${self:custom.stage}-dynamodb-bookings-table}
  
  list_booking:
    role:  ${ssm:${self:custom.stage}-list-bookings-iam-role}
    handler: list-bookings/handler.list
    events:
      - http:
          path: /bookings
          method: get
          authorizer: authorizer
    environment:
      DYNAMODB_BOOKINGS: ${ssm:${self:custom.stage}-dynamodb-bookings-table}
  
  authorizer:
    handler: authorizer/handler.authorizer
    environment:
      JWT_SECRET: ${ssm:${self:custom.stage}-jwt-secret}

custom:
  stage: ${opt:stage, self:provider.stage}